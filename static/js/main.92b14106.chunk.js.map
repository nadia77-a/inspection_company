{"version":3,"sources":["redux-store/models/auth.js","redux-store/mainReducer.js","config/api.js","helpers/request.js","api-calls/auth.js","redux-store/sagas/auth.js","redux-store/mainSaga.js","redux-store/store.js","config/history.js","helpers/helpers.js","helpers/privateRoutes.js","helpers/authRoutes.js","shared-components/Spinner/index.jsx","routes-config/index.js","App.js","serviceWorker.js","index.js"],"names":["createActions","signInByEmail","setAccountInfo","setAccountInfoError","Types","Creators","AuthTypes","reducer","createReducer","accountInfo","accountInfoError","SIGN_IN_BY_EMAIL","state","loading","SET_ACCOUNT_INFO","mainReducer","combineReducers","auth","AuthReducer","common","CommonReducer","endpoint","apiUrl","window","baseUrl","axios","create","baseURL","api","headers","fetchLogin","email","password","request","post","catch","error","credencials","call","response","console","log","data","sessionStorage","setItem","JSON","stringify","put","AuthActions","mainSaga","all","takeLatest","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","applyMiddleware","run","history","require","createBrowserHistory","checkAuthorization","storedToken","localStorage","getItem","tokenPayload","token","base64Url","split","base64","replace","parse","atob","parseJwt","expiration","Date","exp","getTime","PrivateRoute","Component","component","pathname","redirect","rest","Routes","props","render","className","to","from","location","defaultProps","AuthRoute","Spinner","Home","lazy","About","Contact","Career","Logout","Login","QualitySupport","ManpowerServices","ExpeditingServices","fallback","exact","path","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.92b14106.chunk.js","sourcesContent":["import { createActions, createReducer } from \"reduxsauce\";\r\n\r\nconst { Types, Creators } = createActions({\r\n  signInByEmail: [\"email\", \"password\"],\r\n  setAccountInfo: [\"accountInfo\"],\r\n  setAccountInfoError: [\"accountInfoError\"],\r\n});\r\n\r\nexport const AuthTypes = Types;\r\nexport default Creators;\r\n\r\nconst INITIAL_STATE = {\r\n  accountInfo: {},\r\n  accountInfoError: {},\r\n};\r\n\r\nexport const reducer = createReducer(INITIAL_STATE, {\r\n  [Types.SIGN_IN_BY_EMAIL]: (state) => ({ ...state, loading: true }),\r\n  [Types.SET_ACCOUNT_INFO]: (state, { accountInfo }) => ({\r\n    ...state,\r\n    accountInfo,\r\n  }),\r\n});\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { reducer as AuthReducer } from \"./models/auth\";\r\nimport { reducer as CommonReducer } from \"./models/common\";\r\n\r\nexport const mainReducer = combineReducers({\r\n  auth: AuthReducer,\r\n  common: CommonReducer,\r\n});\r\n","let endpoint = \"https://staging.altechlab.com\";\r\n\r\nconst apiUrl = `${endpoint}`;\r\n\r\nwindow.apiUrl = apiUrl;\r\n\r\nexport default {\r\n  endpoint,\r\n  baseUrl: apiUrl,\r\n};\r\n","import axios from \"axios\";\r\n\r\nimport api from \"config/api\";\r\n\r\nexport default axios.create({\r\n  baseURL: api.baseUrl,\r\n  headers: api.headers,\r\n});\r\n","import request from \"helpers/request\";\r\n\r\nexport const fetchLogin = (email, password) =>\r\n  request\r\n    .post(`/backend/api/user/login?username=${email}&password=${password}`)\r\n    .catch((error) => ({ error }));\r\n","import { put, call } from \"redux-saga/effects\";\r\n\r\nimport AuthActions from \"redux-store/models/auth\";\r\n\r\nimport { fetchLogin } from \"api-calls/auth\";\r\n\r\nexport function* signInByEmail(credencials) {\r\n  const response = yield call(\r\n    fetchLogin,\r\n    credencials.email,\r\n    credencials.password\r\n  );\r\n  console.log(\"response\", response);\r\n  if (response && response.data) {\r\n    sessionStorage.setItem(\"accountData\", JSON.stringify(response.data));\r\n  }\r\n  if (response && response.error) {\r\n    if (response.error.response) {\r\n      if (response.error.response.data) {\r\n        yield put(\r\n          AuthActions.setAccountInfoError(response.error.response.data)\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { takeLatest, all } from \"redux-saga/effects\";\r\n\r\n/* ------------- Types ------------- */\r\nimport { AuthTypes } from \"./models/auth\";\r\nimport { signInByEmail } from \"./sagas/auth\";\r\n\r\nexport function* mainSaga() {\r\n  yield all([takeLatest(AuthTypes.SIGN_IN_BY_EMAIL, signInByEmail)]);\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { mainReducer } from \"./mainReducer\";\r\nimport { mainSaga } from \"./mainSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware = [sagaMiddleware];\r\n\r\nconst store = createStore(mainReducer, applyMiddleware(...middleware));\r\n\r\nsagaMiddleware.run(mainSaga);\r\n\r\nexport default store;\r\n","const history = require(\"history\").createBrowserHistory();\r\n\r\nexport default history;\r\n","import React from \"react\";\r\nimport history from \"config/history\";\r\n\r\nexport const DisplayFormikState = (props) => (\r\n  <div style={{ margin: \"1rem 0\" }}>\r\n    <h3 style={{ fontFamily: \"monospace\" }}>&nbsp;</h3>\r\n    <pre\r\n      style={{\r\n        background: \"#f6f8fa\",\r\n        fontSize: \".65rem\",\r\n        padding: \".5rem\",\r\n      }}\r\n    >\r\n      <strong>props</strong> = {JSON.stringify(props, null, 2)}\r\n    </pre>\r\n  </div>\r\n);\r\n\r\nexport const browserRedirect = (location) => {\r\n  history.push(location);\r\n};\r\n\r\nexport const parseJwt = (token) => {\r\n  if (token) {\r\n    const base64Url = token.split(\".\")[1];\r\n    if (token.split(\".\")[1]) {\r\n      const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\r\n      return JSON.parse(window.atob(base64));\r\n    } else return token;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const checkAuthorization = () => {\r\n  const storedToken = localStorage.getItem(\"token\");\r\n\r\n  if (storedToken) {\r\n    const tokenPayload = parseJwt(storedToken);\r\n\r\n    const expiration = new Date(tokenPayload.exp * 1000).getTime();\r\n    const current = new Date().getTime();\r\n\r\n    if (current > expiration) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { checkAuthorization } from \"helpers/helpers\";\r\n\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  redirect: pathname,\r\n  ...rest\r\n}) => {\r\n  const Routes = (props) => {\r\n    if (checkAuthorization() === true) {\r\n      return (\r\n        <Route\r\n          {...rest}\r\n          render={(props) => (\r\n            <div className=\"privateLayout\">\r\n              <Component {...rest} {...props} />\r\n            </div>\r\n          )}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname,\r\n            state: { from: props.location },\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  return <Routes />;\r\n};\r\n\r\nPrivateRoute.defaultProps = { redirect: \"/login\" };\r\n\r\nPrivateRoute.propTypes = {\r\n  component: PropTypes.object.isRequired,\r\n  redirect: PropTypes.string,\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { checkAuthorization } from \"helpers/helpers\";\r\n\r\nconst AuthRoute = ({ component: Component, redirect: pathname, ...rest }) => {\r\n  const Routes = (props) => {\r\n    if (checkAuthorization() === false) {\r\n      return (\r\n        <Route\r\n          {...rest}\r\n          render={(props) => (\r\n            <div className=\"authLayout\">\r\n              <Component {...rest} {...props} />\r\n            </div>\r\n          )}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname,\r\n            state: { from: props.location },\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  return <Routes />;\r\n};\r\n\r\nAuthRoute.defaultProps = { redirect: \"/\" };\r\n\r\nAuthRoute.propTypes = {\r\n  component: PropTypes.object.isRequired,\r\n  redirect: PropTypes.string,\r\n};\r\n\r\nexport default AuthRoute;\r\n","import React, { Component } from \"react\";\r\nimport \"./spinner.css\";\r\n\r\nclass Spinner extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loader-wrapper\">\r\n        <div className=\"spinner\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner;\r\n","import { Switch } from \"react-router-dom\";\r\nimport React, { Suspense, lazy } from \"react\";\r\nimport { Router } from \"react-router\";\r\nimport history from \"config/history\";\r\nimport PrivateRoute from \"helpers/privateRoutes\"; // Private Routes, Will only accessible after Login\r\nimport AuthRoute from \"helpers/authRoutes\"; // Auth Routes, Will only accessible before login.\r\n\r\nimport { Route } from \"react-router-dom\"; //  Route, Will accessible before and after login (always accessible).\r\n\r\nimport Spinner from \"shared-components/Spinner\";\r\n\r\n// Lazy loading of all the components.\r\nconst Home = lazy(() => import(\"web/routes/Home\"));\r\nconst About = lazy(() => import(\"web/routes/About\"));\r\nconst Contact = lazy(() => import(\"web/routes/Contact\"));\r\nconst Career = lazy(() => import(\"web/routes/Career\"));\r\nconst Logout = lazy(() => import(\"web/routes/Logout\"));\r\nconst Login = lazy(() => import(\"web/routes/Login\"));\r\n\r\nconst QualitySupport = lazy(() => import(\"web/routes/QualitySupport\"));\r\nconst ManpowerServices = lazy(() => import(\"web/routes/ManpowerServices\"));\r\nconst ExpeditingServices = lazy(() => import(\"web/routes/ExpeditingServices\"));\r\n\r\n// Root routes\r\nconst Routes = () => (\r\n  <Router history={history}>\r\n    <Suspense fallback={<Spinner></Spinner>}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n\r\n        <Route exact path=\"/home\" component={Home} />\r\n        <Route exact path=\"/about\" component={About} />\r\n        <Route exact path=\"/contact\" component={Contact} />\r\n        <Route exact path=\"/career\" component={Career} />\r\n        <Route exact path=\"/test\" component={Login} />\r\n        <AuthRoute path=\"/login\" component={Login} />\r\n\r\n        <Route exact path=\"/quality-support\" component={QualitySupport} />\r\n        <Route exact path=\"/manpower-services\" component={ManpowerServices} />\r\n        <Route\r\n          exact\r\n          path=\"/expediting-services\"\r\n          component={ExpeditingServices}\r\n        />\r\n\r\n        <PrivateRoute path=\"/logout\" component={Logout} />\r\n      </Switch>\r\n    </Suspense>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux-store/store\";\r\nimport Root from \"./routes-config\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Root />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./config/vars.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// // Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}